on:
  push:
    branches:
      - main
    paths:
      - '**/image/**'
  workflow_dispatch:

name: Build and Publish Docker Images

permissions:
  packages: write
  contents: read

jobs:
  images:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.filter-challenges.outputs.matrix }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: "0"

      - name: Get changed files
        id: changed-files
        if: github.event_name != 'workflow_dispatch'
        uses: tj-actions/changed-files@v46
        with:
          since_last_remote_commit: true
          dir_names: true
          dir_names_max_depth: 1
          matrix: true

      - name: Filter challenges with images
        id: filter-challenges
        run: |
          # For manual workflow_dispatch, build all images
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "Manual trigger detected - building all images"
            filtered_dirs='[]'

            # Find all directories containing an image/ subdirectory
            for dir in */; do
              dir=${dir%/}  # Remove trailing slash

              # Skip .github directory
              if [[ "$dir" == ".github" ]]; then
                continue
              fi

              # Check if image directory exists
              if [[ -d "$dir/image" ]]; then
                echo "Found image directory in $dir"
                filtered_dirs=$(echo "$filtered_dirs" | jq -c ". += [\"$dir\"]")
              fi
            done
          else
            # For push events, only build changed images
            echo "Push event detected - building only changed images"
            changed_dirs='${{ steps.changed-files.outputs.all_changed_files }}'
            echo "Raw changed directories: $changed_dirs"

            # Convert JSON array to bash array and filter
            filtered_dirs='[]'
            for dir in $(echo "$changed_dirs" | jq -r '.[]'); do
              # Skip .github directory
              if [[ "$dir" == ".github" ]]; then
                echo "Skipping .github directory"
                continue
              fi

              # Check if image directory exists
              if [[ -d "$dir/image" ]]; then
                echo "Found image directory in $dir"
                filtered_dirs=$(echo "$filtered_dirs" | jq -c ". += [\"$dir\"]")
              else
                echo "No image directory in $dir, skipping"
              fi
            done
          fi

          echo "Filtered challenges: $filtered_dirs"
          echo "matrix=$filtered_dirs" >> $GITHUB_OUTPUT

      - name: Debug
        run: |
          echo "Changed files: ${{ steps.changed-files.outputs.all_changed_files }}"
          echo "Filtered challenges: ${{ steps.filter-challenges.outputs.matrix }}"

  build-and-push:
    runs-on: ubuntu-latest
    needs: images
    strategy:
      matrix:
        image: ${{ fromJson(needs.images.outputs.matrix) }}
    if: ${{ needs.images.outputs.matrix != '[]' && needs.images.outputs.matrix != '' }}
    steps: 
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: "0"
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Docker Setup Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          platforms: |
            linux/amd64
            linux/arm64
          context: ${{ matrix.image }}/image
          file: ${{ matrix.image }}/image/Dockerfile
          push: true
          tags: ghcr.io/kubeasy-dev/${{ matrix.image }}:latest
          cache-from: type=gha
          cache-to: type=gha, mode=max