apiVersion: v1
kind: ConfigMap
metadata:
  name: check-security-context
data:
  pod-security-context.rego: |
    package kubeasy.challenge

    # Check that pod-level securityContext has runAsNonRoot
    violation[{"msg": msg}] {
      not input.spec.template.spec.securityContext.runAsNonRoot
      msg := "Pod securityContext must set runAsNonRoot: true to prevent running as root"
    }

    # Check that pod-level securityContext has runAsUser set to non-root
    violation[{"msg": msg}] {
      not input.spec.template.spec.securityContext.runAsUser
      msg := "Pod securityContext must set runAsUser to a non-root UID (e.g., 1000)"
    }

    # Check that runAsUser is not 0 (root)
    violation[{"msg": msg}] {
      input.spec.template.spec.securityContext.runAsUser == 0
      msg := "Pod securityContext runAsUser cannot be 0 (root). Use a non-root UID like 1000"
    }

  container-security-context.rego: |
    package kubeasy.challenge

    # Check that container has securityContext
    violation[{"msg": msg}] {
      container := input.spec.template.spec.containers[_]
      not container.securityContext
      msg := sprintf("Container '%s' must have a securityContext defined", [container.name])
    }

    # Check that container has allowPrivilegeEscalation: false
    violation[{"msg": msg}] {
      container := input.spec.template.spec.containers[_]
      container.securityContext
      container.securityContext.allowPrivilegeEscalation != false
      msg := sprintf("Container '%s' must set allowPrivilegeEscalation: false", [container.name])
    }

    # Check that container has readOnlyRootFilesystem: true
    violation[{"msg": msg}] {
      container := input.spec.template.spec.containers[_]
      container.securityContext
      container.securityContext.readOnlyRootFilesystem != true
      msg := sprintf("Container '%s' must set readOnlyRootFilesystem: true", [container.name])
    }

    # Check that container has runAsNonRoot: true
    violation[{"msg": msg}] {
      container := input.spec.template.spec.containers[_]
      container.securityContext
      container.securityContext.runAsNonRoot != true
      msg := sprintf("Container '%s' must set runAsNonRoot: true", [container.name])
    }

  capabilities.rego: |
    package kubeasy.challenge

    # Check that all capabilities are dropped
    violation[{"msg": msg}] {
      container := input.spec.template.spec.containers[_]
      container.securityContext
      not container.securityContext.capabilities
      msg := sprintf("Container '%s' must drop all capabilities", [container.name])
    }

    violation[{"msg": msg}] {
      container := input.spec.template.spec.containers[_]
      container.securityContext.capabilities
      not has_drop_all(container)
      msg := sprintf("Container '%s' must drop ALL capabilities (capabilities.drop: [ALL])", [container.name])
    }

    has_drop_all(container) {
      drop := container.securityContext.capabilities.drop
      drop[_] == "ALL"
    }
